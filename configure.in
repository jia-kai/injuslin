#This file is part of injuslin, informatcis judge system for linux.
#
#Copyright (C) <2008, 2009>  Jiakai <jia.kai66@gmail.com>
#
#Injuslin is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Injuslin is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with injuslin.  If not, see <http://www.gnu.org/licenses/>.

AC_PREREQ(2.61)
AC_INIT([injuslin], [1.0-beta3], [jia.kai66@gmail.com])
AM_INIT_AUTOMAKE([injuslin], [1.0-beta3])
AC_CONFIG_SRCDIR([src/main.cpp])
AC_CONFIG_HEADER([config.h])

IT_PROG_INTLTOOL()
AM_GNU_GETTEXT([external]) 

# Checks for programs.
AC_PROG_CXX

# Checks for libraries.
AC_CHECK_LIB([ncursesw], [initscr], [], [AC_MSG_ERROR([Sorry, you have to install ncurses first.])])
AC_CHECK_LIB([menu], [new_menu], [], [AC_MSG_ERROR([Sorry, you have to install menu in ncurses first.])])
AC_CHECK_LIB([panel], [new_panel], [], [AC_MSG_ERROR([Sorry, you have to install panel in ncurses first.])])
AC_CHECK_LIB([z], [compress2], [], [AC_MSG_ERROR([Sorry, you have to install zlib first.])])
AC_CHECK_LIB([pthread], [pthread_create], [], [AC_MSG_ERROR([Sorry, you have to install pthread first.])])
AC_CHECK_LIB([readline], [readline], [], [AC_MSG_ERROR([Sorry, you have to install readline first.])])

AM_PATH_GTK_2_0(2.10.0,,AC_MSG_ERROR( GTK+ 2.10.0 is required, but not found.))

# Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([sys/time.h unistd.h libintl.h locale.h], [], [AC_MSG_ERROR([Required headers not found.])])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T

# Checks for library functions.
AC_FUNC_CLOSEDIR_VOID
AC_FUNC_FORK
AC_HEADER_STDC
AC_CHECK_FUNCS([memset mkdir rmdir strerror setlocale])

CXXFLAGS="${CXXFLAGS} -Wall"

AC_ARG_ENABLE(debug,
[  --enable-debug      Enable debug build],
[
  debugbuild="y"
  CXXFLAGS=" -Wall -ggdb -DDEBUG "
])

AC_ARG_ENABLE(chroot,
[  --enable-chroot      Enable chroot execute. Please see details in src/common.h],
[
  chrootbuild="y"
  CXXFLAGS="${CXXFLAGS} -DEXECUTE_WITH_CHROOT"
])

AC_OUTPUT([Makefile src/Makefile po/Makefile.in man/Makefile])

echo
echo "***************************************"
echo

echo "Please make sure that the user 'nobody' and the group 'nobody' exists. "
echo "  For Ubuntu users, you may need to run a command like this: "
echo "     sudo addgroup nobody "
echo "     sudo usermod -g nobody nobody "

echo
echo

if [[ "$debugbuild" = "y" ]]; then
	echo "Debug               Enabled"
else
	echo "Debug               Disabled"
fi

if [[ "$chrootbuild" = "y" ]]; then
	echo
	echo
	echo "chroot feature is enabled. "
	echo "You need to do some extra work, please see details in src/common.h ."
fi

